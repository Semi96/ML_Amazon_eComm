rSquared <- function(preds, actuals, sampleMean) {
1 - sum((preds - actuals)^2)/sum((sampleMean-actuals)^2)
}
MAE <- function(preds, actuals) {
sum(abs(preds - actuals))/length(actuals)
}
RMSE <- function(preds, actuals) {
sqrt(sum((preds - actuals)^2)/length(actuals))
}
# make predictions
pred_cart <- predict(treeFinal, newdata=ames.test)
set.seed(1)
split = createDataPartition(ames$SalePrice, p = 0.65, list = FALSE)
ames.train_fact = ames[split,]
ames.test_fact = ames[-split,]
gbm.model_1 <- gbm(SalePrice ~ .,
data = ames.train_fact,
distribution = "gaussian",
n.trees = 100,
interaction.depth = 1,
shrinkage = 0.1,
n.minobsinnode = 10)
gbm.model_2 <- gbm(SalePrice ~ .,
data = ames.train_fact,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 2,
shrinkage = 0.01,
n.minobsinnode = 10)
gbm.model_3 <- gbm(SalePrice ~ .,
data = ames.train_fact,
distribution = "gaussian",
n.trees = 10,
interaction.depth = 3,
shrinkage = 1,
n.minobsinnode = 10)
inSampleMetrics <- matrix(0, nrow = 5, ncol = 3, dimnames = list(c("CART","Random Forest","GBM 1", "GBM 2", "GBM 3"), c("R-Squared","MAE","RMSE")))
outSampleMetrics <- matrix(0, nrow = 5, ncol = 3, dimnames = list(c("CART","Random Forest","GBM 1", "GBM 2", "GBM 3"), c("R-Squared","MAE","RMSE")))
rSquared <- function(preds, actuals, sampleMean) {
1 - sum((preds - actuals)^2)/sum((sampleMean-actuals)^2)
}
MAE <- function(preds, actuals) {
sum(abs(preds - actuals))/length(actuals)
}
RMSE <- function(preds, actuals) {
sqrt(sum((preds - actuals)^2)/length(actuals))
}
# make predictions
pred_cart <- predict(treeFinal, newdata=ames.test)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(xgboost)
library(ROCR)
# load data
ames = read.csv("ames.csv")
ames$SalePrice = as.numeric(ames$SalePrice)
# factorize all character variables
ames[sapply(ames, is.character)] <- lapply(ames[sapply(ames, is.character)],
as.factor)
ggplot(ames) + geom_density(aes(x=SalePrice))
ames_num <- ames %>%
select(where(is.numeric))
corr <- cor(ames_num)
corrSalePrice <- as.data.frame(corr[33,])
names(corrSalePrice)[1] <- "salePriceCorr"
corrSalePrice <- corrSalePrice %>%
arrange(desc(salePriceCorr)) %>%
filter(salePriceCorr<1)
head(corrSalePrice)
ames.noOutGRA <- ames %>%
filter(GrLivArea <4500)
ggplot(ames.noOutGRA) + geom_point(aes(x=GrLivArea, y=SalePrice, color=as.factor(GarageCars))) + ggtitle("With 3 outliers removed")
ames.saleCat <- ames %>%
mutate(salePriceCat = ifelse(SalePrice <= 150000, "1. low",
ifelse(SalePrice <= 250000, "2. med", "3. high")))
ggplot(ames.saleCat) + geom_bar(aes(x=as.factor(MoSold), fill=salePriceCat), position="dodge")
ames.kitchQualRank <- ames %>%
mutate(kitchenQualRank = ifelse(KitchenQual=="Ex", "1. Ex",
ifelse(KitchenQual=="Gd", "2. Gd",
ifelse(KitchenQual=="TA", "3. TA",
ifelse(KitchenQual=="Fa", "4. Fair", "5. Po")))))
ggplot(ames.kitchQualRank) + geom_boxplot(aes(x=kitchenQualRank, y=SalePrice))
# ames <- ames %>%
#   mutate(log10_salePrice=log10(ames$SalePrice))
set.seed(657)
split = createDataPartition(ames$SalePrice, p = 0.65, list = FALSE)
ames.train = ames[split,]
ames.test = ames[-split,]
cpVals <- data.frame(.cp = c(0,0.0000001,0.000001,.00001,0.0001,0.001,0.01,0.1))
cpCV = train(SalePrice ~ .,
trControl=trainControl(method="cv",number=10),
data=ames.train,
method="rpart",
tuneGrid=cpVals,
metric="Rsquared",
control=rpart.control(maxdepth=5),
maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_point() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=15))
#treeFinal <- cpCV$finalModel
treeFinal <- rpart(SalePrice ~ ., data=ames.train, minbucket, cp=best.cp)
#treeFinal <- cpCV$finalModel
treeFinal <- rpart(SalePrice ~ ., data=ames.train, cp=best.cp)
best.cp = cpCV$bestTune
#treeFinal <- cpCV$finalModel
treeFinal <- rpart(SalePrice ~ ., data=ames.train, cp=best.cp)
prp(treeFinal, digits = 3, varlen = 0, faclen = 0)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(xgboost)
library(ROCR)
# load data
ames = read.csv("ames.csv")
ames$SalePrice = as.numeric(ames$SalePrice)
# factorize all character variables
ames[sapply(ames, is.character)] <- lapply(ames[sapply(ames, is.character)],
as.factor)
ggplot(ames) + geom_density(aes(x=SalePrice))
ames_num <- ames %>%
select(where(is.numeric))
corr <- cor(ames_num)
corrSalePrice <- as.data.frame(corr[33,])
names(corrSalePrice)[1] <- "salePriceCorr"
corrSalePrice <- corrSalePrice %>%
arrange(desc(salePriceCorr)) %>%
filter(salePriceCorr<1)
head(corrSalePrice)
ames.noOutGRA <- ames %>%
filter(GrLivArea <4500)
ggplot(ames.noOutGRA) + geom_point(aes(x=GrLivArea, y=SalePrice, color=as.factor(GarageCars))) + ggtitle("With 3 outliers removed")
ames.saleCat <- ames %>%
mutate(salePriceCat = ifelse(SalePrice <= 150000, "1. low",
ifelse(SalePrice <= 250000, "2. med", "3. high")))
ggplot(ames.saleCat) + geom_bar(aes(x=as.factor(MoSold), fill=salePriceCat), position="dodge")
ames.kitchQualRank <- ames %>%
mutate(kitchenQualRank = ifelse(KitchenQual=="Ex", "1. Ex",
ifelse(KitchenQual=="Gd", "2. Gd",
ifelse(KitchenQual=="TA", "3. TA",
ifelse(KitchenQual=="Fa", "4. Fair", "5. Po")))))
ggplot(ames.kitchQualRank) + geom_boxplot(aes(x=kitchenQualRank, y=SalePrice))
# ames <- ames %>%
#   mutate(log10_salePrice=log10(ames$SalePrice))
set.seed(657)
split = createDataPartition(ames$SalePrice, p = 0.65, list = FALSE)
ames.train = ames[split,]
ames.test = ames[-split,]
cpVals <- data.frame(.cp = c(0,0.0000001,0.000001,.00001,0.0001,0.001,0.01,0.1))
cpCV = train(SalePrice ~ .,
trControl=trainControl(method="cv",number=10),
data=ames.train,
method="rpart",
tuneGrid=cpVals,
metric="Rsquared",
control=rpart.control(maxdepth=5),
maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_point() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=15))
best.cp = cpCV$bestTune
#treeFinal <- cpCV$finalModel
treeFinal <- rpart(SalePrice ~ ., data=ames.train, cp=best.cp)
prp(treeFinal, digits = 3, varlen = 0, faclen = 0)
train.rf.oob <- train(x = ames.train %>% select(-SalePrice),
y = ames.train$SalePrice,
method="rf",
tuneGrid=data.frame(mtry=15:20),
ntree=100,
nodesize=25,
trControl=trainControl(method="oob"))
train.rf.oob$results %>%
ggplot(aes(x=mtry,
y=Rsquared)) +
geom_point(size=5) +
theme_bw() +
labs(x="Number of variables per split",
y="Out-of-bag R^2") +
scale_x_continuous(breaks=15:20)
best.mtry <- train.rf.oob$bestTune[[1]]
mod.rfFINAL = randomForest(SalePrice ~ .,
data=ames.train,
ntree=100,
nodesize=25,
mtry=best.mtry)
importance.rf <- data.frame(imp=importance(mod.rfFINAL))
importance.rf %>% arrange(desc(IncNodePurity))
gbm.model_1 <- gbm(SalePrice ~ .,
data = ames.train,
distribution = "gaussian",
n.trees = 100,
interaction.depth = 1,
shrinkage = 0.1,
n.minobsinnode = 10)
gbm.model_2 <- gbm(SalePrice ~ .,
data = ames.train,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 2,
shrinkage = 0.01,
n.minobsinnode = 10)
gbm.model_3 <- gbm(SalePrice ~ .,
data = ames.train,
distribution = "gaussian",
n.trees = 10,
interaction.depth = 3,
shrinkage = 1,
n.minobsinnode = 10)
inSampleMetrics <- matrix(0, nrow = 5, ncol = 3, dimnames = list(c("CART","Random Forest","GBM 1", "GBM 2", "GBM 3"), c("R-Squared","MAE","RMSE")))
outSampleMetrics <- matrix(0, nrow = 5, ncol = 3, dimnames = list(c("CART","Random Forest","GBM 1", "GBM 2", "GBM 3"), c("R-Squared","MAE","RMSE")))
rSquared <- function(preds, actuals, sampleMean) {
1 - sum((preds - actuals)^2)/sum((sampleMean-actuals)^2)
}
MAE <- function(preds, actuals) {
sum(abs(preds - actuals))/length(actuals)
}
RMSE <- function(preds, actuals) {
sqrt(sum((preds - actuals)^2)/length(actuals))
}
# make predictions
pred_cart <- predict(treeFinal, newdata=ames.train)
pred_rf <- predict(mod.rfFINAL, newdata=ames.train)
pred_gbm1 <- predict(gbm.model_1, newdata=ames.train, n.trees=100)
pred_gbm2 <- predict(gbm.model_2, newdata=ames.train, n.trees=1000)
pred_gbm3 <- predict(gbm.model_3, newdata=ames.train, n.trees=10)
pred_cart <- predict(treeFinal, newdata=ames.test)
pred_rf <- predict(mod.rfFINAL, newdata=ames.test)
pred_gbm1 <- predict(gbm.model_1, newdata=ames.test, n.trees=100)
pred_gbm2 <- predict(gbm.model_2, newdata=ames.test, n.trees=1000)
pred_gbm3 <- predict(gbm.model_3, newdata=ames.test, n.trees=10)
sampMean <- mean(ames.train$SalePrice)
inSampleMetrics[1,1] <- rSquared(pred_cart, ames.test$SalePrice, sampMean)
inSampleMetrics[2,1] <- rSquared(pred_rf, ames.test$SalePrice, sampMean)
inSampleMetrics[3,1] <- rSquared(pred_gbm1, ames.test$SalePrice, sampMean)
inSampleMetrics[4,1] <- rSquared(pred_gbm2, ames.test$SalePrice, sampMean)
inSampleMetrics[5,1] <- rSquared(pred_gbm3, ames.test$SalePrice, sampMean)
inSampleMetrics[1,2] <- MAE(pred_cart, ames.test$SalePrice, sampMean)
sampMean <- mean(ames.train$SalePrice)
inSampleMetrics[1,1] <- rSquared(pred_cart, ames.test$SalePrice, sampMean)
inSampleMetrics[2,1] <- rSquared(pred_rf, ames.test$SalePrice, sampMean)
inSampleMetrics[3,1] <- rSquared(pred_gbm1, ames.test$SalePrice, sampMean)
inSampleMetrics[4,1] <- rSquared(pred_gbm2, ames.test$SalePrice, sampMean)
inSampleMetrics[5,1] <- rSquared(pred_gbm3, ames.test$SalePrice, sampMean)
inSampleMetrics[1,2] <- MAE(pred_cart, ames.test$SalePrice)
inSampleMetrics[2,2] <- MAE(pred_rf, ames.test$SalePrice)
inSampleMetrics[3,2] <- MAE(pred_gbm1, ames.test$SalePrice)
inSampleMetrics[4,2] <- MAE(pred_gbm2, ames.test$SalePrice)
inSampleMetrics[5,2] <- MAE(pred_gbm3, ames.test$SalePrice)
inSampleMetrics[1,3] <- RMSE(pred_cart, ames.test$SalePrice)
inSampleMetrics[2,3] <- RMSE(pred_rf, ames.test$SalePrice)
inSampleMetrics[3,3] <- RMSE(pred_gbm1, ames.test$SalePrice)
inSampleMetrics[4,3] <- RMSE(pred_gbm2, ames.test$SalePrice)
inSampleMetrics[5,3] <- RMSE(pred_gbm3, ames.test$SalePrice)
outSampleMetrics[1,1] <- rSquared(pred_cart, ames.test$SalePrice, sampMean)
outSampleMetrics[2,1] <- rSquared(pred_rf, ames.test$SalePrice, sampMean)
outSampleMetrics[3,1] <- rSquared(pred_gbm1, ames.test$SalePrice, sampMean)
outSampleMetrics[4,1] <- rSquared(pred_gbm2, ames.test$SalePrice, sampMean)
outSampleMetrics[5,1] <- rSquared(pred_gbm3, ames.test$SalePrice, sampMean)
outSampleMetrics[1,2] <- MAE(pred_cart, ames.test$SalePrice)
outSampleMetrics[2,2] <- MAE(pred_rf, ames.test$SalePrice)
outSampleMetrics[3,2] <- MAE(pred_gbm1, ames.test$SalePrice)
outSampleMetrics[4,2] <- MAE(pred_gbm2, ames.test$SalePrice)
outSampleMetrics[5,2] <- MAE(pred_gbm3, ames.test$SalePrice)
outSampleMetrics[1,3] <- RMSE(pred_cart, ames.test$SalePrice)
outSampleMetrics[2,3] <- RMSE(pred_rf, ames.test$SalePrice)
outSampleMetrics[3,3] <- RMSE(pred_gbm1, ames.test$SalePrice)
outSampleMetrics[4,3] <- RMSE(pred_gbm2, ames.test$SalePrice)
outSampleMetrics[5,3] <- RMSE(pred_gbm3, ames.test$SalePrice)
View(inSampleMetrics)
# make predictions
in.pred_cart <- predict(treeFinal, newdata=ames.train)
in.pred_rf <- predict(mod.rfFINAL, newdata=ames.train)
in.pred_gbm1 <- predict(gbm.model_1, newdata=ames.train, n.trees=100)
in.pred_gbm2 <- predict(gbm.model_2, newdata=ames.train, n.trees=1000)
in.pred_gbm3 <- predict(gbm.model_3, newdata=ames.train, n.trees=10)
out.pred_cart <- predict(treeFinal, newdata=ames.test)
out.pred_rf <- predict(mod.rfFINAL, newdata=ames.test)
out.pred_gbm1 <- predict(gbm.model_1, newdata=ames.test, n.trees=100)
out.pred_gbm2 <- predict(gbm.model_2, newdata=ames.test, n.trees=1000)
out.pred_gbm3 <- predict(gbm.model_3, newdata=ames.test, n.trees=10)
sampMean <- mean(ames.train$SalePrice)
inSampleMetrics[1,1] <- rSquared(in.pred_cart, ames.test$SalePrice, sampMean)
inSampleMetrics[2,1] <- rSquared(in.pred_rf, ames.test$SalePrice, sampMean)
inSampleMetrics[3,1] <- rSquared(in.pred_gbm1, ames.test$SalePrice, sampMean)
inSampleMetrics[4,1] <- rSquared(in.pred_gbm2, ames.test$SalePrice, sampMean)
inSampleMetrics[5,1] <- rSquared(in.pred_gbm3, ames.test$SalePrice, sampMean)
inSampleMetrics[1,2] <- MAE(in.pred_cart, ames.test$SalePrice)
inSampleMetrics[2,2] <- MAE(in.pred_rf, ames.test$SalePrice)
inSampleMetrics[3,2] <- MAE(in.pred_gbm1, ames.test$SalePrice)
inSampleMetrics[4,2] <- MAE(in.pred_gbm2, ames.test$SalePrice)
inSampleMetrics[5,2] <- MAE(in.pred_gbm3, ames.test$SalePrice)
inSampleMetrics[1,3] <- RMSE(in.pred_cart, ames.test$SalePrice)
inSampleMetrics[2,3] <- RMSE(in.pred_rf, ames.test$SalePrice)
inSampleMetrics[3,3] <- RMSE(in.pred_gbm1, ames.test$SalePrice)
inSampleMetrics[4,3] <- RMSE(in.pred_gbm2, ames.test$SalePrice)
inSampleMetrics[5,3] <- RMSE(in.pred_gbm3, ames.test$SalePrice)
outSampleMetrics[1,1] <- rSquared(out.pred_cart, ames.test$SalePrice, sampMean)
outSampleMetrics[2,1] <- rSquared(out.pred_rf, ames.test$SalePrice, sampMean)
outSampleMetrics[3,1] <- rSquared(out.pred_gbm1, ames.test$SalePrice, sampMean)
outSampleMetrics[4,1] <- rSquared(out.pred_gbm2, ames.test$SalePrice, sampMean)
outSampleMetrics[5,1] <- rSquared(out.pred_gbm3, ames.test$SalePrice, sampMean)
outSampleMetrics[1,2] <- MAE(out.pred_cart, ames.test$SalePrice)
outSampleMetrics[2,2] <- MAE(out.pred_rf, ames.test$SalePrice)
outSampleMetrics[3,2] <- MAE(out.pred_gbm1, ames.test$SalePrice)
outSampleMetrics[4,2] <- MAE(out.pred_gbm2, ames.test$SalePrice)
outSampleMetrics[5,2] <- MAE(out.pred_gbm3, ames.test$SalePrice)
outSampleMetrics[1,3] <- RMSE(out.pred_cart, ames.test$SalePrice)
outSampleMetrics[2,3] <- RMSE(out.pred_rf, ames.test$SalePrice)
outSampleMetrics[3,3] <- RMSE(out.pred_gbm1, ames.test$SalePrice)
outSampleMetrics[4,3] <- RMSE(out.pred_gbm2, ames.test$SalePrice)
outSampleMetrics[5,3] <- RMSE(out.pred_gbm3, ames.test$SalePrice)
# make predictions
in.pred_cart <- predict(treeFinal, newdata=ames.train)
in.pred_rf <- predict(mod.rfFINAL, newdata=ames.train)
in.pred_gbm1 <- predict(gbm.model_1, newdata=ames.train, n.trees=100)
in.pred_gbm2 <- predict(gbm.model_2, newdata=ames.train, n.trees=1000)
in.pred_gbm3 <- predict(gbm.model_3, newdata=ames.train, n.trees=10)
out.pred_cart <- predict(treeFinal, newdata=ames.test)
out.pred_rf <- predict(mod.rfFINAL, newdata=ames.test)
out.pred_gbm1 <- predict(gbm.model_1, newdata=ames.test, n.trees=100)
out.pred_gbm2 <- predict(gbm.model_2, newdata=ames.test, n.trees=1000)
out.pred_gbm3 <- predict(gbm.model_3, newdata=ames.test, n.trees=10)
sampMean <- mean(ames.train$SalePrice)
inSampleMetrics[1,1] <- rSquared(in.pred_cart, ames.train$SalePrice, sampMean)
inSampleMetrics[2,1] <- rSquared(in.pred_rf, ames.train$SalePrice, sampMean)
inSampleMetrics[3,1] <- rSquared(in.pred_gbm1, ames.train$SalePrice, sampMean)
inSampleMetrics[4,1] <- rSquared(in.pred_gbm2, ames.train$SalePrice, sampMean)
inSampleMetrics[5,1] <- rSquared(in.pred_gbm3, ames.train$SalePrice, sampMean)
inSampleMetrics[1,2] <- MAE(in.pred_cart, ames.train$SalePrice)
inSampleMetrics[2,2] <- MAE(in.pred_rf, ames.train$SalePrice)
inSampleMetrics[3,2] <- MAE(in.pred_gbm1, ames.train$SalePrice)
inSampleMetrics[4,2] <- MAE(in.pred_gbm2, ames.train$SalePrice)
inSampleMetrics[5,2] <- MAE(in.pred_gbm3, ames.train$SalePrice)
inSampleMetrics[1,3] <- RMSE(in.pred_cart, ames.train$SalePrice)
inSampleMetrics[2,3] <- RMSE(in.pred_rf, ames.train$SalePrice)
inSampleMetrics[3,3] <- RMSE(in.pred_gbm1, ames.train$SalePrice)
inSampleMetrics[4,3] <- RMSE(in.pred_gbm2, ames.train$SalePrice)
inSampleMetrics[5,3] <- RMSE(in.pred_gbm3, ames.train$SalePrice)
outSampleMetrics[1,1] <- rSquared(out.pred_cart, ames.test$SalePrice, sampMean)
outSampleMetrics[2,1] <- rSquared(out.pred_rf, ames.test$SalePrice, sampMean)
outSampleMetrics[3,1] <- rSquared(out.pred_gbm1, ames.test$SalePrice, sampMean)
outSampleMetrics[4,1] <- rSquared(out.pred_gbm2, ames.test$SalePrice, sampMean)
outSampleMetrics[5,1] <- rSquared(out.pred_gbm3, ames.test$SalePrice, sampMean)
outSampleMetrics[1,2] <- MAE(out.pred_cart, ames.test$SalePrice)
outSampleMetrics[2,2] <- MAE(out.pred_rf, ames.test$SalePrice)
outSampleMetrics[3,2] <- MAE(out.pred_gbm1, ames.test$SalePrice)
outSampleMetrics[4,2] <- MAE(out.pred_gbm2, ames.test$SalePrice)
outSampleMetrics[5,2] <- MAE(out.pred_gbm3, ames.test$SalePrice)
outSampleMetrics[1,3] <- RMSE(out.pred_cart, ames.test$SalePrice)
outSampleMetrics[2,3] <- RMSE(out.pred_rf, ames.test$SalePrice)
outSampleMetrics[3,3] <- RMSE(out.pred_gbm1, ames.test$SalePrice)
outSampleMetrics[4,3] <- RMSE(out.pred_gbm2, ames.test$SalePrice)
outSampleMetrics[5,3] <- RMSE(out.pred_gbm3, ames.test$SalePrice)
gbm_imp1 = summary(gbm.model_1)
gbm_imp1 %>% filter(rel.inf > 0.5)
gbm_imp2 = summary(gbm.model_2)
gbm_imp2 %>% filter(rel.inf > 0.5)
gbm_imp3 = summary(gbm.model_3)
gbm_imp3 %>% filter(rel.inf > 0.5)
gbm_imp1 = summary(gbm.model_1);
gbm_imp1 %>% filter(rel.inf > 0.5)
plot(gbm_imp1)
plot(gbm_imp1[x,y])
gbm_imp1 = summary(gbm.model_1);
gbm_imp1 %>% filter(rel.inf > 0.5)
plot(gbm_imp1[:,1],gbm_imp1[:,2])
gbm_imp1 = summary(gbm.model_1);
gbm_imp1 %>% filter(rel.inf > 0.5)
plot(gbm_imp1[,1],gbm_imp1[,2])
gbm_imp1 = summary(gbm.model_1);
gbm_imp1 %>% filter(rel.inf > 0.5)
plot(gbm_imp1[,2],gbm_imp1[,1])
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
# PART A
dcs <- read.csv("Dartboard_dcs.csv")
future <- read.csv("Dartboard_future.csv")
historical <- read.csv("Dartboard_historical-1.csv")
View(historical)
library(caret)
library(tidyverse)
library(ggplot2)
setwd("~/MIT/15.095-ML/ML_Amazon_eComm")
data <- read.csv("data/predictCassNoChina.csv")
data <- read.csv("data/predCassNoChina.csv")
View(data)
# get year, factorize month
data$Date <- as.POSIXct(data$Date)
data <- read.csv("data/predCassNoChina.csv")
View(data)
# get year, factorize month
data$Year <- substr(data$Date, length(data$Date)-3,length(data$Date))
# get year, factorize month
data <- data %>%
mutate(Year = substr(Date, length(Date)-3,length(Date)))
View(data)
length(data$Date[1])
length(data$Date[3])
size(data$Date[3])
data$Date[3]
nchar(data$Date[3])
# get year, factorize month
data <- data %>%
mutate(Year = substr(Date, nchar(Date)-3,nchar(Date)))
# get year, factorize month
data <- data %>%
mutate(Year = as.numeric(substr(Date, nchar(Date)-3,nchar(Date))))
# get year, factorize month
data <- data %>%
mutate(Year = as.numeric(substr(Date, nchar(Date)-3,nchar(Date))),
Month = ifelse(nchar(Date) == 9, substr(Date, 1, 2), substr(Date, 1, 1)))
lubridate::month(1)
lubridate::month("10/1/1990")
lubridate::year("10/1/1990")
# get year, factorize month
data <- data %>%
mutate(Year = as.numeric(substr(Date, nchar(Date)-3,nchar(Date))),
Month = as.factor(ifelse(nchar(Date) == 9, substr(Date, 1, 2), substr(Date, 1, 1))))
View(data)
# simple linear regression
mod <- lm(CassIndex ~ . -Date, data)
View(mod)
summary(mod)
data_new <- data %>%
mutate(quarter = ifelse(Month %in% c(1,2,3), 1,
ifelse(Month %in% c(4,5,6), 2,
ifelse(Month %in% c(7,8,9), 3, 4))))
View(data_new)
data_quarter <- data %>%
select(Year < 2021) %>%
mutate(quarter = ifelse(Month %in% c(1,2,3), 1,
ifelse(Month %in% c(4,5,6), 2,
ifelse(Month %in% c(7,8,9), 3, 4))))
data_quarter <- data %>%
select(Year < 2021) %>%
mutate(quarter = ifelse(Month %in% c(1,2,3), 1,
ifelse(Month %in% c(4,5,6), 2,
ifelse(Month %in% c(7,8,9), 3, 4))))
data_quarter <- data %>%
filter(Year < 2021) %>%
mutate(quarter = ifelse(Month %in% c(1,2,3), 1,
ifelse(Month %in% c(4,5,6), 2,
ifelse(Month %in% c(7,8,9), 3, 4))))
View(data_quarter)
data_quarter <- data %>%
filter(Year < 2021) %>%
mutate(Quarter = ifelse(Month %in% c(1,2,3), 1,
ifelse(Month %in% c(4,5,6), 2,
ifelse(Month %in% c(7,8,9), 3, 4))))
data_quarterized <- data_quarter %>%
group_by(Year, Quarter) %>%
summarise(avgCASS = mean(CassIndex))
View(data_quarterized)
data_quarter <- data %>%
filter(Year < 2021) %>%
mutate(Quarter = ifelse(Month %in% c(1,2,3), 1,
ifelse(Month %in% c(4,5,6), 2,
ifelse(Month %in% c(7,8,9), 3, 4))),
BeginOfQ = ifelse(Month %in% c(1,4,7,10),1,0))
View(data_quarter)
data_quarterized$BeginOfQ = 1
View(data_quarterized)
data_quarter_withFeatures <- data_quarterized %>%
left_join(data_quarter, by=c("Year", "Month", "BeginOfQ"))
data_quarter_withFeatures <- data_quarterized %>%
left_join(data_quarter, by=c("Year", "Quarter", "BeginOfQ"))
View(data_quarter_withFeatures)
data_final <- data_quarterized %>%
left_join(data_quarter, by=c("Year", "Quarter", "BeginOfQ")) %>%
select(Year, Quarter, OilPrice, ExChUs, USCPI, USPMI, avgCASS)
View(data_final)
data_final$Quarter <- as.factor(data_final$Quarter)
qmod <- lm(avgCass ~ ., data_final)
qmod <- lm(avgCASS ~ ., data_final)
summary(qmod)
data_final_train <- data_final %>%
filter(Year < 2020)
data_final_test <- data_final %>%
filter(Year == 2020)
qmod <- lm(avgCASS ~ ., data_final_train)
summary(qmod)
testPreds <- predict(qmod, newdata = data_final_test)
View(data_final_test)
trainMean <- mean(data_final_train$avgCASS)
View(data_final_test)
testRsquared <- rSquared(testPreds, data_final_test$avgCASS, trainMean)
rSquared <- function(preds, actuals, sampleMean) {
1 - sum((preds - actuals)^2)/sum((sampleMean-actuals)^2)
}
testRsquared <- rSquared(testPreds, data_final_test$avgCASS, trainMean)
View(data)
summary(mod)
View(data_final)
summary(qmod)
write.csv(data_final_train, "data_final_train.csv")
write.csv(data_final_test, "data_final_test.csv")
